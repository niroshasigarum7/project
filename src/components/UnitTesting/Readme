Jest - Unit testing

Official site - https://jestjs.io/


References


1. Jest is a delightful JavaScript Testing Framework with a focus on simplicity.
2. It works with projects using Babel, TypeScript, Node, React, Angular, Vue and more!


Advantages
1. zero config: Jest aims to work out of the box, config free, on most JavaScript projects.
2. snapshots: Make tests which keep track of large objects with ease. Snapshots live either alongside your tests or embedded inline.
3. isolated: Tests are parallelized by running them in their own processes to maximize performance.
4. great api: From it to expect - Jest has the entire toolkit in one place. Well documented, well maintained, well good
5. Fast and safe
- By ensuring your tests have unique global state, Jest can reliably run tests in parallel.
- To make things quick, Jest runs previously failed tests frist and re-organizes runs based on how long test files take.
6. Code coverage
- Generate code coverage by adding the flag --coverage.
- No additional setup needed.
- Jest can collect code coverage information from entire projects, including untested files.
7. Easy mocking
- Jest uses a custom resolver for imports in your tests making it simple to mock any object outside of your test's scope.
- You can use mocked imports with the rich Mock functions API to spy on function calls with readable test syntax
8. great exceptions
- Test fail - when they do, Jest provides rich context (toBe, toBeCloseTo toEqual)


describe, it
watch mode
beforeEach and beforeAll
afterEach and afterAll
skipping and isolating tests
asynchronous tests - contains assertion - done() callback, return a promise, pass an async unction
mocking?
- reduce the dependencies required by tests - faster exceution
- prevent side-effects during test
- Build custom mocks to facilitate desired testing procedures
- A convincing dupliacte of an object with no internal workings
- Can be automatically or manually created
- Has same API as original, but no side-effects
- Spies and other mock features simplify testing

mocking processes
- Scan the original object for methods, give the new object spy methods with the same names
- Ensure that any methods which returned a promise still return a promise in the mock
- Create mocks for any complex values that are returned from methods which are required for tests

Mock functions
- also known as Spies
- no side-effects
- counts functions calls (spy)
- Records arguments passes when called
- Can be "loaded" with return values
- Return value must approximate original

Create Mock files
- Approrpriately name NPM mocks are loaded automatically
- Mocks must reside in a __mocks__ folder next to mocked module
- NPM modules and local modules can both be mocked

Automatic and manual mocking

- In some setups, any require statements will have mocks generated automatically
- If a manual mock file exists, it will be used as the mock instead of the automatic version
- Most apps require some combinatopn of manual and automatic mocking

Manual mocks
- Exists as a separate file alongside the file being mocked
- Manual mocks will be used automatically for NPM modules
- Manual mocks are more work than automatic mocks
- Needs to be updated when mocked file changes

Automatic mocks
- Most modules can be automatically replaced with mocks
- Mocks are usually generated correctly, but sometimes not
- Greatly reduced likelihood of side-effects during tests
- Developer must use discretion

Automatic mocking challenges
- methods returning a specific and complex value often can't be mocked automatically
- methods that are not part of your module at compile-time won't be mocked
- Modules that you did not expect to be mocked may be mocked

Snapshot testing
- Json -based record of a component's output
- compared to component's actual output during testing processe
- Committed along with other modules and tests to the application repo

How Snapshot testing works?
- First, HTML output is generated with React.
Note: react-test-renderer is used instead of react-dom, enzyme is not used
- The first time toMatchSnapshot() is called, a snapshot is created.
- Each subsequent time, the new snapshot is comapred with the old one.


import renderer from 'react-test-renderer';
import { MyComponent } from './MyComponent;

const tree = renderer.create(
    <MyComponent title="The meaning of life" />
);

expect(tree.toJSON()).toMatchSnapshot();

Advantages to snapshots
- Fast and automatic
- Catches regressions humans may miss
- Works nicely with libraries that take in state and output HTML components(React, Angular, Vue)
- Adds some protection against regressions when no time is available for manually writing tests
- Requires little traning or knowledge of testing to use.

Disadvantages
- Easy to ignore and suppress
- Protects only against regression
- If a component is working incorrectly and then is fixed, a snapshot test will say it is now broken
- Adds extra files to an already crowded repo
- Sensitive to incidental changes
- A waste of resources, if component is certain to be modified in near future

Updating snapshots

- Tests must be run with --update flag
- Old snapshots will be replaced with Image of current output
- Using --update without careful consideration diminishes the value of snapshots

jest Tagslit -u


Testing components

A spectrum of React components
- Components may or may not have lifecycle handlers
- Components may or may not have internal state
- Components may or may not generate side effects
- components may get state from arguments, or from external dependencies

Building Testable React Components
- No internal state - output is an indempotent product of the props that are provided
- No side effects - any AJAX calls, UI changes or other side effects are handled by sagas, thunk, etc., but not by components
- No lifecycle hooks - fetching data is handled on the application level, not the component level

React Redux and Jest: A Fine Pair 
- Components don't generate side effects
- Components consists of logical display and container components
- Components do not have internal state

Testing React Redux components
- Test container and display elements separately
- Use unit tests to verify methods and properties passed by container are accurate
- Use snapshot tests to verify the output of the display component, passing props in directly


Enzyme vs. React Test renderer

React Test renderer
- Takes a React component and outputs the resulting HTML without a dom
- From the React team
- Useful for getting the output HTML of a component for snapshot testing
- Recommended by the Jest team

Enzyme
- Takes a React component and outputs the resulting HTML without a dom
- From an unrelated, but respected team (AirBnB)
- Useful for testing a variety of interactions including click, keyboard input and more
- Has a variety of open bugs which make using it a challenge

Testing Stateful React components
- Mock dependencies then test them
- Using spies to verify side-effects
- Move logic from lifecycle to services(javascript class etc)
- Prevent regression with Snapshot
- inject values by writing mocks for services
- Make stateless components, where possible


Summary
- React-Test-Renderer is recommended over Enzyme
- Testing stateless React components is simple and Easy
 container and display can be tested separately
- Testing stateful React components is tiresome and complex
 - side effects must be verified by mocking called API
 - Services must be specialy mocked to coax component into desired state.


 Advanced Jest matchers


What is a matchers?
- Also knowns as an assertion or expectations
- Represents a claim that a value will be equal (or not) to something
- Throws an error (test fails) if matcher's claim is not validated.


function test() {
    const value = getValue42();
    if (value !== 42) {
        throw new Error(/**/);
    }
}

- Handwritten test
- if statement (condition)
- Throws an error
- In test runner, the error results in test failing, not in the application failing

function test2() {
    const value = getValue42();
    expect(value).toEqual(42);
}

- Equivalent test using a matcher
- Matcher is Equivalent to if statement above


Exploring matchers
 - https://facebook.github.io/jest/docs/en/expect.HTML


 